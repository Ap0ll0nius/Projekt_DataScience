Install Anaconda

Bash code:

conda install pandas scikit-learn
conda install -c conda-forge nltk

Python:
Bilbiotheken importieren mit:
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.decomposition import TruncatedSVD

Natural Language Tollkit einbinden:
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
nltk.download('stopwords')
nltk.download('punkt')

.csv-Datei laden bzw. einlesen (mit Fehlermeldung falls eine Spalte nicht richtig benannt ist):

# Load the data
df = pd.read_csv("university_of_oxford_tripadvisor_reviews.csv")

# Display the first few rows
print(df.head())

# Check if the dataset has a column named 'text'
if 'text' not in df.columns:
    print("Error: No column named 'text'. Check your dataset.")
else:
    texts = df['text']

GIBT ZURÜCK:
   helpfulVotes publishedDate publishedPlatform  rating  \
0             0    2024-10-04             OTHER       4   
1             0    2024-09-17             OTHER       4   
2             0    2024-09-16            MOBILE       5   
3             0    2024-09-07             OTHER       4   
4             0    2024-08-15            MOBILE       4   

                                                text  \
0  Visit today university of oxford amazing archi...   
1  Having some difficulty with walking and standi...   
2  Founded in the 12th century, it’s not only one...   
3  To visit this interesting museum it is essenti...   
4  伦敦到牛津的高铁一般都是从两个站出发：\n去程：London Paddington or L...   

                                 title  tripType  
0                                Happy    FAMILY  
1  Fabulous Buildings and Architecture   COUPLES  
2   One of world’s oldest universities  BUSINESS  
3       Oxford University Press Museum      SOLO  
4                                 牛津大学   FRIENDS

Text vorbereinigen:

import re

def preprocess_text(text):
    # Lowercase the text
    text = text.lower()
    # Remove punctuation
    text = re.sub(r'[^\w\s]', '', text)
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = word_tokenize(text)
    text = ' '.join([word for word in tokens if word not in stop_words])
    return text

df['cleaned_text'] = df['text'].apply(preprocess_text)

resultiert in LOOKUP Error
LookupError: 
**********************************************************************
  Resource punkt_tab not found.
  Please use the NLTK Downloader to obtain the resource:

  >>> import nltk
  >>> nltk.download('punkt_tab')
  
  For more information see: https://www.nltk.org/data.html

  Attempted to load tokenizers/punkt_tab/english/

Import der Ressource aus dem Fehler-Log:
  >>> import nltk
  >>> nltk.download('punkt_tab')

Erfolgreich

Bag of Words:
vectorizer = CountVectorizer()
bow_matrix = vectorizer.fit_transform(df['cleaned_text'])

# Convert to DataFrame for easier readability
bow_df = pd.DataFrame(bow_matrix.toarray(), columns=vectorizer.get_feature_names_out())
print(bow_df.head())

Erfolgreich

Tf-idf-Maß:
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(df['cleaned_text'])

# Convert to DataFrame for easier readability
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())
print(tfidf_df.head())

Erfolgreich

LSA einbauen:

# Apply TruncatedSVD
n_topics = 5  # Number of topics to extract
lsa_model = TruncatedSVD(n_components=n_topics, random_state=42)
lsa_matrix = lsa_model.fit_transform(tfidf_matrix)

# Display top words for each topic
terms = tfidf_vectorizer.get_feature_names_out()
for i, component in enumerate(lsa_model.components_):
    top_terms = [terms[idx] for idx in component.argsort()[-10:]]  # Top 10 terms
    print(f"Topic {i+1}: {', '.join(top_terms)}")

Optional: Matplotlib oder wordcloud zur Visualisierung nutzen.

from wordcloud import WordCloud
import matplotlib.pyplot as plt

for i, component in enumerate(lsa_model.components_):
    wordcloud = WordCloud(width=800, height=400).generate(' '.join([terms[idx] for idx in component.argsort()[-50:]]))
    plt.figure()
    plt.title(f"Topic {i+1}")
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis('off')
    plt.show()
